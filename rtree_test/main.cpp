//
//  main.cpp
//  rtree_test
//
//  Created by Tara Larrue on 5/7/17.
//  Copyright Â© 2017 Tara Larrue. All rights reserved.
//

#include <iostream>
#include <stdio.h>

#include "mbr_index.hpp"

int main(int argc, const char * argv[]) {
    
    // build mbr index
    int dim = 2;
    MbrIndex* mbr_index_= new MbrIndex();
    
    // vector of T[]* arrays
    // array = [minX, maxX, minY, maxY]
    std::vector<void*> mbrs_;
    
    double testData[] = {
        1.14004e-10, 2.0011e+13, 3.55049e-08, 2.01859e+13,
        3.55049e-08, 2.01859e+13, 7.87759e-07, 2.1504e+13,
        7.87759e-07, 2.1504e+13, 4.50361e+251, 3.88263e+174,
        9.26016e-06, 1.98823e+13, 5.7392e-05, 1.96937e+13,
        5.7392e-05, 1.96937e+13, 0.000205391, 1.95517e+13,
        0.000205391, 1.95517e+13, 0.000730548, 1.97802e+13,
        0.000730548, 1.97802e+13, 0.00251205, 2.06915e+13,
        0.00251205, 2.06915e+13, 0.00795967, 2.05033e+13,
        0.00795967, 2.05033e+13, 0.0150437, 2.07752e+13,
        0.0150437, 2.07752e+13, 1.44115e+18, 2.19902e+13,
        0.0287742, 2.02684e+13, 0.0548255, 1.87449e+13,
        0.0548255, 1.87449e+13, 0.103576, 2.11501e+13,
        0.103576, 2.11501e+13, 0.194659, 1.9906e+13,
        0.194659, 1.9906e+13, 0.359249, 2.16172e+13,
        0.359249, 2.16172e+13, 0.66864, 1.97502e+13,
        0.66864, 1.97502e+13, 1.21198, 1.94725e+13,
        1.21198, 1.94725e+13, 2.12008, 2.07019e+13,
        2.12008, 2.07019e+13, 2.9962, 2.12773e+13,
        2.9962, 2.12773e+13, 3.88147,2.11124e+13,
        3.88147, 2.11124e+13, 5.58399, 2.04697e+13,
        5.58399, 2.04697e+13, 7.39005, 1.99375e+13,
        7.39005, 1.99375e+13, 10.4439, 2.13274e+13,
        10.4439, 2.13274e+13, 14.058, 2.07146e+13,
        14.058, 2.07146e+13, 19.4674, 1.93067e+13};
    
    /*
    double testData[] = {
        0., 10.0, 0., 10.0,
        0., 5.0, 0., 5.0,
        -10.0, -1.0, -10.0, -1.0
    };
     */
    /*
    double testData[] = {
        0, 4.89125e-322, 0, 4.89125e-322,
        0, 4.89125e-322, 4.94066e-322, 9.83191e-322,
        0, 4.89125e-322, 9.88131e-322, 1.47726e-321,
        0, 4.89125e-322, 1.4822e-321, 1.97132e-321,
        0, 4.89125e-322, 1.97626e-321, 2.46539e-321,
        0, 4.89125e-322, 2.47033e-321, 2.95945e-321,
        0,4.89125e-322, 2.96439e-321, 3.45352e-321,
        0, 4.89125e-322, 3.45846e-321, 3.94758e-321,
        0, 4.89125e-322, 3.95253e-321, 4.44165e-321,
        0, 4.89125e-322, 4.44659e-321, 4.93572e-321,
        4.94066e-322, 9.83191e-322, 0, 4.89125e-322,
        4.94066e-322, 9.83191e-322, 4.94066e-322, 9.83191e-322,
        4.94066e-322, 9.83191e-322, 9.88131e-322, 1.47726e-321,
        4.94066e-322, 9.83191e-322, 1.4822e-321, 1.97132e-321,
        4.94066e-322, 9.83191e-322, 1.97626e-321, 2.46539e-321,
        4.94066e-322, 9.83191e-322, 2.47033e-321, 2.95945e-321,
        4.94066e-322, 9.83191e-322, 2.96439e-321, 3.45352e-321,
        4.94066e-322, 9.83191e-322, 3.45846e-321, 3.94758e-321,
        4.94066e-322, 9.83191e-322, 3.95253e-321, 4.44165e-321,
        4.94066e-322, 9.83191e-322, 4.44659e-321, 4.93572e-321,
        9.88131e-322, 1.47726e-321, 0, 4.89125e-322    };
     */
    int testSize = sizeof(testData) / sizeof(testData[0]);
    
    for (int i=0; i<testSize/4; i++){
        double mbr[4] = {testData[i*4], testData[i*4+1], testData[i*4+2], testData[i*4+3]};
        mbrs_.push_back((void*)&mbr);
    }

    mbr_index_->buildTree(mbrs_, dim);
    
    // perform intersect query
    double subarray[] = {
        0.0001, 20.0, 0.0001, 20.0
    };
    
    std::vector<int64_t> search_tile_candidates_;
    const double* subarray2 = static_cast<const double*>((void*)&subarray);
    mbr_index_->intersectQuery(subarray2, search_tile_candidates_);
    
    // print results
    std::cout << "Result size: " << search_tile_candidates_.size() << std::endl;
    for (int i=0; i<search_tile_candidates_.size(); i++){
        std::cout << search_tile_candidates_[i] << std::endl;
    }
    
    return 0;
}
